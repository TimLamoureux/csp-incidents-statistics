{"version":3,"sources":["Components/Incidents.js","Components/PieChart.js","Components/ColumnChart.js","App.js","index.js"],"names":["Incidents","Object","classCallCheck","this","data","incidentsData","fieldsArray","o","assign","reduce","acc","incident","bind","_ref$dateStart","_ref","dateStart","_ref$dateEnd","dateEnd","cloneDeep","filter","curr","moment","date","isBetween","fn","keys","key","push","name","y","apply","e","console","error","metric","curData","Array","isArray","i","length","undefined","rangeSize","Number","parseInt","num","f1","Math","floor","range","concat","withHighcharts","props","react_default","a","createElement","react_jsx_highcharts_min","title","id","dataLabels","enabled","format","showInLegend","formatString","Highcharts","ColumnChart","possibleConstructorReturn","getPrototypeOf","call","plotOptions","series","tooltip","className","type","categories","map","colorByPoint","size","Component","provideChart","App","_this","start","month","year","state","dateFormat","startDate","toDate","endDate","rawIncidents","gender","age","activity","injury_location","treatments","patrollers","transport_base","transport_out","destination","refreshData","filteredIncidents","setState","incidents","incidentCount","getOneMetric","toUsableData","groupByNumber","_this2","dateChange","dateObj","dateStr","flatpickrInstance","config","defineProperty","log","build_default","value","onChange","options","altFormat","maxDate","Date","Components_ColumnChart","Components_PieChart","word","charAt","toUpperCase","slice","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.53a2602b.chunk.js","sourcesContent":["import incidentsData from '../incidents.json';\nimport {cloneDeep} from 'lodash';\nimport moment from 'moment';\n\n\n/*export default {\n    incidents: incidents,\n    toSankeyData: (fieldsArray) => {\n        let o = Object.assign(incidents);\n        return o;\n    },\n    toUsableData: () => {\n        return Object.keys(incidents).reduce(function (acc, key) {\n            acc.push({name: key, y: this[key]});\n            return acc;\n        }, []);\n    }\n};*/\n\nclass Incidents {\n\n    constructor() {\n\n        // incidents represent the imported JSON file\n        //for(var k in incidents) {this[k]=incidents[k];}\n\n        this.data = incidentsData;\n        //this.state.data = this.data;\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    /**\n     *\n     */\n    toSankeyData(fieldsArray) {\n        // Todo should be deep copied?\n        let o = Object.assign(this.data);\n\n        this.data.reduce( ((acc, incident) => {\n            //if ( this === undefined || this[0] === undefined) { return acc; }\n\n\n            /**\n             * Issue is probably coming from bind. Difference between debugger's this and Babel this\n             * use function instead of arrow fn see fn groupByNumber\n             */\n            \n            /*let arr = this;\n\n            // Using for loop because pointer of map inside a reduce function was not working properly\n            let len = arr.length;\n            let i = 0;\n            for (i; i<this.length; i++) {\n                if (acc[current] === undefined) {\n                    acc[current] = {};\n                }\n\n                // Last element to append\n                if ( array[index+1] === undefined ) {\n\n                }\n\n                if (acc[this[0]] === undefined) {\n                    acc[this[0]] = {}\n                }\n            }\n\n*/\n\n\n\n//            acc[this[0]] = ( acc[this[0]] === undefined ? 5 : 2 )\n\n            return acc;\n        }).bind(fieldsArray), {});\n\n        return o;\n    }\n\n    filter({dateStart = \"\", dateEnd = \"\"}) {\n        let o = cloneDeep(this);\n\n        o.data = o.data.filter( function(curr) {\n            return moment(curr.date).isBetween(\n                moment(dateStart),\n                moment(dateEnd),\n                'days',\n                '[]'\n            );\n        });\n\n        return o;\n    }\n\n    // Converts this to an array of Data\n    toUsableData(fn) {\n        let o = Object.keys(this.data).reduce(function (acc, key) {\n            acc.push({name: key, y: this.data[key]});\n            return acc;\n        }.bind(this), []);\n\n        //result(o, fn, o);\n\n        if ( typeof fn === \"function\") {\n            try {\n                o = fn.apply(o);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n\n        return o;\n    };\n\n    getOneMetric(metric) {\n        let o = cloneDeep(this);\n        o.data = o.data.reduce( (acc, curData) => {\n            let key = curData[metric];\n\n            if ( Array.isArray(key) ) {\n                for(let i=0; i<key.length; i++) {\n                    acc[key[i]] === undefined ? acc[key[i]] = 1 : acc[key[i]] += 1;\n                }\n            }\n            else { acc[key] === undefined ? acc[key] = 1 : acc[key] += 1; }\n\n            return acc;\n        }, []);\n        return o;\n    };\n\n    groupByNumber(rangeSize) {\n        let o = cloneDeep(this);\n        rangeSize = Number.parseInt(rangeSize);\n        o.data = o.data.reduce( function(acc, curData, num) {\n            if (curData === undefined) { return acc; }\n\n            let f1 = Math.floor(num/rangeSize)*rangeSize;\n            let range = `${f1}-${f1+rangeSize-1}`;\n\n            acc[range] = acc[range] === undefined ? curData : acc[range] += curData;\n\n            return acc;\n        }, []);\n        return o;\n    }\n\n}\n\nexport default Incidents;","import React from 'react';\nimport Highcharts from 'highcharts';\nimport {\n    HighchartsChart,\n    withHighcharts,\n    Title,\n    PieSeries,\n    Legend,\n    Tooltip,\n    YAxis\n} from 'react-jsx-highcharts';\n\n\nconst PieChart = (props) => {\n\n    let dataLabels = /*props.dataLabels |*/ {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.y} ({point.percentage:.1f} %)',\n    };\n\n\n\n    return (\n        <HighchartsChart>\n            <Title>{props.title}</Title>\n            {/*<XAxis type=\"category\" />*/}\n            <YAxis id=\"y\">\n                <PieSeries id={props.id} data={props.data} dataLabels={dataLabels} showInLegend={true} formatString=\"Test point.x\" />\n            </YAxis>\n            <Legend />\n            <Tooltip />\n        </HighchartsChart>\n    );\n}\n\nexport default withHighcharts(PieChart, Highcharts);\n","import React, {Component} from 'react';\nimport Highcharts from 'highcharts';\nimport {\n    HighchartsChart,\n    withHighcharts,\n    provideChart,\n    Title,\n    ColumnSeries,\n    Tooltip,\n    XAxis,\n    YAxis\n} from 'react-jsx-highcharts';\n\n// Good example of HOC https://whawker.github.io/react-jsx-highcharts/examples/CustomComponent/index.html\nclass ColumnChart extends Component {\n    constructor (props) {\n        super(props);\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        let props = this.props;\n\n        let plotOptions = /*props.plotOptions |*/ {\n            series: {\n                dataLabels: {\n                    enabled: true,\n                    format: '<b>{point.name}</b> ({point.y:,.0f})'\n                },\n                tooltip: {}\n            },\n            tooltip: {}\n        }\n\n        return (\n            <HighchartsChart plotOptions={plotOptions} className={props.className}>\n                <Title>{props.title}</Title>\n                <XAxis id=\"x\" type=\"category\" categories={props.data.map( (curr) => curr.name )} />\n                <YAxis id=\"y\" >\n                    <ColumnSeries id={props.id} data={props.data} colorByPoint={true} showInLegend={true} size={500} formatString=\"Test point.x\" />\n                </YAxis>\n                <Tooltip />\n            </HighchartsChart>\n        );\n    }\n}\n\nexport default provideChart(ColumnChart);\n\n// const ColumnChart = ({data}) => {\n//\n//     // let dataLabels = props.dataLabels | {\n//     //     enabled: true,\n//     //     format: '<b>{point.name}</b>: {point.y} ({point.percentage:.1f} %)',\n//     // };\n//\n//     let plotOptions = /*props.plotOptions |*/ {\n//         series: {\n//             dataLabels: {\n//                 enabled: true,\n//                 format: '<b>{point.name}</b> ({point.y:,.0f})'\n//             },\n//             tooltip: {}\n//         },\n//         tooltip: {}\n//     }\n// }\n\n//export default withHighcharts(ColumnChart, Highcharts);\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport moment from 'moment';\nimport 'flatpickr/dist/themes/material_green.css'\nimport Flatpickr from 'react-flatpickr';\n\n// Data\nimport Incidents from \"./Components/Incidents\";\nimport PieChart from \"./Components/PieChart\";\nimport ColumnChart from \"./Components/ColumnChart\";\nimport { withHighcharts } from 'react-jsx-highcharts';\nimport Highcharts from 'highcharts/highcharts';\n//import SankeyChart from \"./Components/SankeyChart\";\n\n\n// Todo add possibility to filter dates\n\n\nclass App extends Component {\n\n    constructor() {\n        super();\n\n        // Adjust timeframe for current season.\n        // Check if before Nov 1st. If so, substract one year and set to nov 1st. If Nov and Dec, sets to nov 1st of this year\n        let start = moment();\n\n        if ( start.month() < 10 ) {\n            start = start.year(start.year()-1);\n        }\n        start.month('October').date(1);\n\n        this.state = {\n            dateFormat: 'Y-m-d',\n            startDate: start.toDate(),\n            endDate: moment().toDate(),\n            rawIncidents: new Incidents(),\n            // incidents: filteredIncidents,\n            // incidentCount: filteredIncidents.data.length,\n            gender: [],\n            age: [],\n            activity: [],\n            injury_location: [],\n            treatments: [],\n            patrollers: [],\n            transport_base: [],\n            transport_out: [],\n            destination: []\n        }\n    }\n\n    componentDidMount() {\n        this.refreshData();\n    }\n\n    static capitalize(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n    }\n\n    refreshData() {\n        let filteredIncidents = this.state.rawIncidents.filter({\n            dateStart: this.state.startDate,\n            dateEnd: this.state.endDate\n        });\n\n        this.setState({\n            incidents: filteredIncidents,\n            incidentCount: filteredIncidents.data.length,\n            gender: filteredIncidents.getOneMetric(\"gender\").toUsableData(),\n            age: filteredIncidents.getOneMetric(\"age\").groupByNumber(\"5\").toUsableData(),\n            activity: filteredIncidents.getOneMetric(\"activity\").toUsableData(),\n            injury_location: filteredIncidents.getOneMetric(\"injury_location\").toUsableData(/*sort*/),\n            treatments: filteredIncidents.getOneMetric(\"treatment\").toUsableData(),\n            patrollers: filteredIncidents.getOneMetric(\"patrollers\").toUsableData(),\n            transport_base: filteredIncidents.getOneMetric(\"transport_base\").toUsableData(),\n            transport_out: filteredIncidents.getOneMetric(\"transport_out\").toUsableData(),\n            destination: filteredIncidents.getOneMetric(\"destination\").toUsableData()\n        });\n\n\n    }\n\n\n    render() {\n\n        let dateChange = (dateObj, dateStr, flatpickrInstance) => {\n            if (typeof flatpickrInstance.config.id === 'undefined')\n                return;\n\n            this.setState({\n                // Interpolate state var name from flatpickr object config\n                [flatpickrInstance.config.id]: dateStr\n            }, () => {\n                console.log(`Updated ${flatpickrInstance.config.id} (${dateStr}). Calling refresh.`);\n                this.refreshData();\n            });\n        };\n\n\n        //incidents.toSankeyData( [\"transport_base\", \"transport_out\"], \"destination\" );\n\n        //let trp = incidents.toSankeyData( [\"transport_base\", \"transport_out\", \"destination\"] );\n\n        return (\n            <div>\n                <h1>Statistics</h1>\n                <div>\n                    Between &nbsp;\n                    <Flatpickr\n                        value={this.state.startDate}\n                        onChange={dateChange}\n                        options={{\n                            id: 'startDate',\n                            altFormat: this.state.dateFormat,\n                            dateFormat: this.state.dateFormat,\n                            maxDate: new Date()\n                        }}\n                    />\n                    &nbsp;and&nbsp;\n                    <Flatpickr\n                        id={'endDate'}\n                        value={this.state.endDate}\n                        onChange={dateChange}\n                        options={{\n                            id: 'endDate',\n                            altFormat: this.state.dateFormat,\n                            dateFormat: this.state.dateFormat,\n                            maxDate: new Date()\n                        }}\n                    />\n                </div>\n                <h2>Number of incidents: {this.state.incidentCount}</h2>\n                <ColumnChart id=\"column-age\" title=\"Age of patients\" data={this.state.age}/>\n                <PieChart id=\"pie-gender\" title=\"Gender of patients\" data={this.state.gender}/>\n                <PieChart id=\"pie-gender\" title=\"Activity performed by injured patients\" data={this.state.activity}/>\n                <ColumnChart id=\"column-injury-location\" title=\"Location of the injury\"\n                             data={this.state.injury_location}/>\n                <PieChart id=\"pie-injury-treatment\" title=\"Treatments\" data={this.state.treatments}/>\n                <ColumnChart id=\"column-patroller\" title=\"Number of incidents a patroller has responded to\"\n                             data={this.state.patrollers}/>\n                <PieChart id=\"pie-transport-base\" title=\"How were patients transported to the base\"\n                          data={this.state.transport_base}/>\n                <PieChart id=\"pie-transport-out\" title=\"How did the patients leave the base\"\n                          data={this.state.transport_out}/>\n                <PieChart id=\"pie-transport-destination\" title=\"Where did the patients go\"\n                          data={this.state.destination}/>\n                {/*<PieChart id=\"pie-trp-base\" title=\"Transport from base\" data={trp_base} />*/}\n\n\n            </div>\n        )\n\n\n    }\n}\n\nexport default withHighcharts(App, Highcharts);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import registerServiceWorker from './registerServiceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n//registerServiceWorker();\n"],"sourceRoot":""}